#
# base.dict .... makedict.sh sample dictionary template
#

    org 0x1000
//
// nop, halt
//
opcode nop
opcode halt

//
// inner interpreter
//
opcode colon
opcode next
opcode run 
opcode startdoes
opcode semi
opcode execute
opcode trap

//
// primitives .. thread instructions
//
opcode dolit
opcode branch
opcode ?branch qbranch
opcode s_dolit

//
// primitives ... memory access
//
opcode c! bytedeposite
opcode ! exclamation
opcode c@ bytefetch
opcode @ atfetch

//
// stack operations
//
opcode rot
opcode swap
opcode drop
opcode over
opcode dup 
//
// return stack operation
//
opcode rsp
opcode r> r2s
opcode >r s2r
opcode r2> r22s
opcode >r2 s2r2

//
// operators
//
opcode not
opcode xor
opcode or
opcode and
opcode / div
opcode * mul
opcode - sub
opcode + add
opcode > gt
opcode /mod slashmod
//
// i/o primitives
//
//opcode getch
opcode emit
opcode space
//opcode cr
//opcode . period
//
// type (addr n -- )
//
//opcode type
//
// user variables
//
//opcode h 
//opcode last
//opcode base
//opcode bl
//
// ,(comma) ... put a word to the dict entry, cell_inc to (here_addr)
//
//opcode , comma
//
// compilers/outer interpreter
//

//
// create ... read a word from input stream and 
//            put it to the end-of-dictionary
//
opcode create
//
// colon, semicolon
//
opcode : start_colondef
opcode ; end_colondef immediate

//
// dd ... dictdump ( addr -- )
opcode dd dictdump
//
// constant
//
//opcode docons
//opcode constant

//
// compile
//
//opcode ] start_compile immediate
//opcode [ end_compile immediate
opcode +rsp add_rsp
// opcode find
opcode compile
opcode [compile] bracompile immediate
opcode word
//opcode _state
//opcode accept
opcode getline
opcode sp@ sp_at
opcode rp! rsp_reset
opcode sp! sp_reset

//
// double length integer
//
opcode d+ dadd
opcode m+ madd
opcode m*/ mmuldiv
opcode d< dlt
opcode u* umul
opcode d_dolit




